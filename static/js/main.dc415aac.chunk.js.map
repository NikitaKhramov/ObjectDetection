{"version":3,"sources":["utilities.js","App.js","index.js"],"names":["drawRect","detections","ctx","forEach","prediction","x","y","width","height","text","strokeStyle","font","fillStyle","lineWidth","beginPath","fillText","rect","stroke","App","webcamRef","useRef","canvasRef","runCoco","a","cocossd","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","obj","getContext","useEffect","className","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+ZAAaA,EAAW,SAACC,EAAYC,GACjCD,EAAWE,SAAQ,SAAAC,GAAY,kBAGCA,EAAU,KAHX,GAGpBC,EAHoB,KAGlBC,EAHkB,KAGhBC,EAHgB,KAGTC,EAHS,KAIrBC,EAAOL,EAAU,MAIvBF,EAAIQ,YADU,QAEdR,EAAIS,KAAO,aACXT,EAAIU,UAHU,QAIdV,EAAIW,UAAY,EAGhBX,EAAIY,YACJZ,EAAIa,SAASN,EAAMJ,EAAE,EAAGC,EAAE,GAC1BJ,EAAIc,KAAKX,EAAGC,EAAGC,EAAOC,GACtBN,EAAIe,aCmFGC,MA1Ff,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAGnBE,EAAO,uCAAG,4BAAAC,EAAA,sEAGIC,MAHJ,OAGRC,EAHQ,OAMdC,aAAY,WACVC,EAAOF,KACN,IARW,2CAAH,qDAWPE,EAAM,uCAAG,WAAOF,GAAP,uBAAAF,EAAA,yDAGkB,qBAAtBJ,EAAUS,SACK,OAAtBT,EAAUS,SAC6B,IAAvCT,EAAUS,QAAQC,MAAMC,WALb,wBAQLD,EAAQV,EAAUS,QAAQC,MAC1BE,EAAaZ,EAAUS,QAAQC,MAAME,WACrCC,EAAcb,EAAUS,QAAQC,MAAMG,YAG5Cb,EAAUS,QAAQC,MAAMtB,MAAQwB,EAChCZ,EAAUS,QAAQC,MAAMrB,OAASwB,EAGjCX,EAAUO,QAAQrB,MAAQwB,EAC1BV,EAAUO,QAAQpB,OAASwB,EAlBhB,UAqBOP,EAAIE,OAAOE,GArBlB,QAqBLI,EArBK,OAwBL/B,EAAMmB,EAAUO,QAAQM,WAAW,MAIzClC,EAASiC,EAAK/B,GA5BH,4CAAH,sDAkCZ,OAFAiC,qBAAU,WAAKb,MAAW,IAGxB,yBAAKc,UAAU,OACb,4BAAQA,UAAU,cACd,yBAAKA,UAAU,oBACf,kBAAC,IAAD,CACEC,IAAKlB,EACLmB,OAAO,EAEPC,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRvC,MAAO,OACPC,OAAQ,UAGZ,4BACE6B,IAAKhB,EACLkB,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRvC,MAAO,OACPC,OAAQ,cCtFtBuC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.dc415aac.chunk.js","sourcesContent":["export const drawRect = (detections, ctx) =>{\r\n    detections.forEach(prediction=>{\r\n        \r\n        // Get prediction results\r\n        const [x,y,width, height] = prediction['bbox'];\r\n        const text = prediction['class'];\r\n        \r\n        // Set styling\r\n        const color = \"green\";\r\n        ctx.strokeStyle = color\r\n        ctx.font = '18px Arial'\r\n        ctx.fillStyle = color\r\n        ctx.lineWidth = 3;\r\n        \r\n        // Draw rectangle\r\n        ctx.beginPath()\r\n        ctx.fillText(text, x-5, y-5)\r\n        ctx.rect(x, y, width, height)\r\n        ctx.stroke() \r\n\r\n    });\r\n}","// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n// Import required model\r\nimport * as cocossd from \"@tensorflow-models/coco-ssd\"\r\n\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\n// Import drawing utility\r\nimport { drawRect } from \"./utilities\";\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  // Main function\r\n  const runCoco = async () => {\r\n    // Load network \r\n    \r\n    const net = await cocossd.load();\r\n\r\n    //  Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // Make Detections    \r\n      const obj = await net.detect(video);\r\n\r\n      // Draw mesh\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      // Update drawing utility\r\n\r\n      drawRect(obj, ctx);\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{runCoco()},[]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n          <div className=\"App-header-child\">\r\n          <Webcam\r\n            ref={webcamRef}\r\n            muted={true} \r\n            \r\n            style={{\r\n              position: \"absolute\",\r\n              marginLeft: \"auto\",\r\n              marginRight: \"auto\",\r\n              left: 0,\r\n              right: 0,\r\n              textAlign: \"center\",\r\n              zindex: 9,\r\n              width: \"100%\",\r\n              height: \"100%\"\r\n            }}\r\n          />\r\n          <canvas\r\n            ref={canvasRef}\r\n            style={{\r\n              position: \"absolute\",\r\n              marginLeft: \"auto\",\r\n              marginRight: \"auto\",\r\n              left: 0,\r\n              right: 0,\r\n              textAlign: \"center\",\r\n              zindex: 8,\r\n              width: \"100%\",\r\n              height: \"100%\"\r\n            }}\r\n          />\r\n          </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  \r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}